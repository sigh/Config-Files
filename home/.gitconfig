[user]
    name = sigh
    email = sigh.projects@gmail.com

[core]
    editor = vim
    excludesfile = ~/.gitignore

[merge]
    tool = splice
    conflictstyle = zdiff3

[mergetool "splice"]
    cmd = "vim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    trustExitCode = true

[alias]
    d = diff --relative
    h = help
    b = branch
    a = add
    m = merge
    mt = mergetool --no-prompt

    st = status -sb
    ci = commit
    co = checkout
    ls = ls-files

    # word diff
    wdiff = diff --word-diff-regex='[a-zA-Z0-9_]+|.' --color-words
    wd = diff --word-diff-regex='[a-zA-Z0-9_]+|.' --color-words --relative

    # diff images (ignore other file types) [NOTE: --relative makes it break]
    idiff = difftool --tool=imagediff --no-prompt
    id = difftool --tool=imagediff --no-prompt

    # view the staged changes
    sdiff = diff --cached
    sd = diff --cached --relative

    # simple amend
    amend = commit --amend -C HEAD

    # Nicely formatted logs:
    #   l: Shows just the main line
    #   lg: All lines and includes a graph
    #   graph: Display of branch & tag topology
    l = log --date=short --first-parent --pretty=format:'%C(bold)%C(ul)%C(blue)%s%+gs%Creset%n%C(yellow)%h %Creset%ad %C(magenta)%ae %Cgreen(%cr)%Creset%Cred%d%n' --stat
    lg = log --date=short --pretty=format:'%C(bold)%C(ul)%C(blue)%s%+gs%Creset%n%C(yellow)%h %Creset%ad %C(magenta)%ae %Cgreen(%cr)%Creset%Cred%d%n' --stat --graph
    graph = log --graph --branches --date=short --pretty=format:'%C(bold)%C(ul)%C(blue)%s%Creset%n%C(yellow)%h %Creset%ad %Cgreen(%cr)%Creset%Cred%d%n' --simplify-by-decoration

    # Show branches sorted by date.
    bs = "!f() { git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) (%(color:green)%(committerdate:relative)%(color:reset))'; }; f"

    # open a github url for the current git repo
    hub = !git remote -v|sed "'s|.*git[:@]\\(.*\\).git.*|http://\\1|;s|m:|m/|'"|uniq|xargs open

    # commit all with an message (which need not be quoted)
    cm = "!f() { git commit -a -m \"$*\" ; }; f"

    # force an action on a dirty working set
    #  if there are local changes then we stash them first
    force = "!f() { if git save -fad __force ; then git reset --hard HEAD && ( cd \"$GIT_PREFIX\" && git \"$@\" ) && git restore --quiet __force ; else git \"$@\"; fi ; }; f"

    # reset to HEAD while saving the working directory.
    safe-reset = "!f() { git save -fd \"$@\" __before_reset ; }; f"

    # share the repo on the network.
    share = "!f() { git update-server-info && cd \"$(git rev-parse --git-dir)\" && webshare \"$@\"; }; f"

    # Git init this directory with existing files commited.
    this = !git init && git add . && git commit -m \"initial commit\"

    # Determine the path relative to the root of the repository
    path = "!python3 -c 'import os,sys; print(\"\\n\".join(os.path.relpath(os.path.join(sys.argv[1], p)) for p in sys.argv[2:]));' \"$GIT_PREFIX\""

[color]
    ui = true

[color.diff]
    meta = blue bold
    frag = magenta
    func = magenta ul

[branch]
    autosetupmerge = true

[diff]
    renames = copies
    mnemonicprefix = true

[rerere]
    enabled = true

[difftool "imagediff"]
    cmd = imagediff $LOCAL $REMOTE $MERGED

[init]
    defaultBranch = main

[delta]
    side-by-side = true
    navigate = true

[rebase]
    autoStash = true
