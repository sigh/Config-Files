#!/usr/bin/env python3

# A wrapper for screen and tmux
#
# usage: session_wrapper screen|tmux [-h] [--reattach] [--child] [--window WINDOW] [--ask]
#                       [--list] [--complete] [--binary PATH] [--command COMMAND]
#                       [session]
#
# positional arguments:
#   session               The session to load. Can be identified by name, pid,
#                         name.pid, pid.name or any unique prefix of previous
#                         options. A "!" suffix forces the creation of a new
#                         screen
#
# optional arguments:
#   -h, --help            show this help message and exit
#   --reattach, -r        Reattach session (don't close existing sessions)
#   --child, -c           Create as child process, don't exec
#   --ask, -a             Ask which screen to open even there is only one match
#   --list, -l            List current screens
#   --complete            List completions for current screens
#   --binary              A path to the session program (tmux or screen)
#   --command             The command to run in the window if this is a new session
#
# interactive prompt:
#   The screen is chosen in the following order:
#   - Blank lines match the first preset (0).
#   - Valid numbers match presets.
#   - Unique exact name or pid matches.
#   - Unique prefix matches.
#   Otherwise the a new interactive prompt is shown.
#
#   A "*" prefix in the list means the screen is already attached.
#   Append "!" to force creation of a new screen.
#   CTRL-C or CTRL-D will exit without launching screen.
#   "?" will display this help.

from __future__ import print_function

import optparse
import cmd
import collections
import os
import re
import sys
import subprocess

DEFAULT_SESSION_NAME = '_'
BLUE = '\033[94m'
NOCOLOR = '\033[0m'

class ScreenSettings(object):
    LIST_RE = r'\t(\d+)\.([^\t]+)\t.*\((At|De)tached\)'

    def __init__(self, binary = None):
        self.binary = binary or 'screen'

    def list_command(self):
        return [self.binary, '-ls']

    def list_line_to_session(self, line):
        result = re.match(ScreenSettings.LIST_RE, line)
        if result:
            return Session(
                pid = result.group(1),
                name = result.group(2),
                attached = result.group(3) == 'At',
                exists = True,
            )

    def launch_command(self, session, **options):
        args = [self.binary]
        if options.get('window', None) is not None:
            args.extend(['-p', options['window']])
        if not session.exists:
            # force creation of a new session
            args.extend(['-S'])
        elif options.get('reattach', False):
            args.extend(['-x', '-S'])
        else:
            args.extend(['-D', '-R'])
        args.append(str(session))

        return args, not options.get('child', False)

class TmuxSettings(object):
    LIST_RE = r'([^:]+): .*'

    def __init__(self, binary = None):
        self.binary = binary or 'tmux'
        subprocess.check_call([self.binary, 'start-server'])

    def list_command(self):
        return [self.binary, 'list-sessions']

    def list_line_to_session(self, line):
        result = re.match(TmuxSettings.LIST_RE, line)
        if result:
            return Session(
                name = result.group(1),
                attached = line.endswith("(attached)"),
                exists = True
            )

    def launch_command(self, session, **options):
        session_name = str(session)
        do_exec = not options.get('child', False)
        base_args = [self.binary, '-2']
        rest_args = []

        if not session.exists:
            # force creation of a new session
            rest_args.extend(['new-session', '-s'])
        else:
            if options.get('window', None) is not None:
                subprocess.check_call(
                        [self.binary, 'select-window', '-t', session_name + ':' + options['window']])

            rest_args.append('attach-session')
            if not options.get('reattach', False):
                rest_args.append('-d');
            rest_args.append('-t')

        # If we are inside tmux then do things a bit differently
        if options.get('current_prog', None) == 'tmux':
            # If the session doesn't exist yet then create it in detached mode.
            if not session.exists:
                # To create a new session the TMUX environment variable must be
                # unset, otherwise tmux gets angry even though we aren't leaving
                # the current sesssion :(
                env = dict(os.environ)
                del env['TMUX']

                subprocess.check_call(
                        [self.binary, 'new-session', '-d', '-s', session_name], env = env)

            rest_args = ['switch-client', '-t']
            # This is important, if we exec then we destroy the current shell.
            do_exec = False

        rest_args.append(session_name)

        if not session.exists and options.get('command', None):
            rest_args.extend([options['command']])

        return base_args + rest_args, do_exec

class Session(object):
    def __init__(self, name, pid = None, attached=False, exists=False):
        self.name = name
        self.pid = pid
        self.attached = attached
        self.exists = exists

    def __str__(self):
        if self.pid:
            return '%s.%s' % (self.pid, self.name)
        else:
            return self.name

    def pretty(self):
        wrapped_name = '%s%s%s' % (BLUE, self.name, NOCOLOR)
        if self.pid:
            return '%s.%s' % (wrapped_name, self.pid)
        else:
            return wrapped_name

class SessionPrompt(cmd.Cmd):
    def __init__(self, all_sessions, initial_session_name):
        cmd.Cmd.__init__(self)
        self.response = None
        self.has_default = has_default(all_sessions)
        self.sessions = all_sessions
        self.prompt = '> '

        if initial_session_name:
            # only show intro when there is some initial text, otherwise all
            # options would be shown anyway.
            self.intro = self.get_intro()
        else:
            self.intro = ''

        pre_prompt, self.options = self.generate_next_prompt(initial_session_name)
        self.intro += pre_prompt

        if initial_session_name:
            # Add initial_session_name text to the history so that it can be
            # accessed by pressing up.
            import readline
            readline.add_history(initial_session_name)

    def precmd(self, line):
        # we only care about the first word
        if not line:
            return line
        else:
            return line.split()[0]

    def onecmd(self, line):
        """ Determine if the line matches a unique session, or keep going """

        # First check if the user wants to stop.
        if line == 'EOF' or line.startswith('#'):
            return True

        if line.startswith('?'):
            self.do_help()
            return False

        # Check if the user chose the default option (blank line).
        if not line:
            self.response = self.options[0]
            return True

        # Check if the user entered a number which matched an option.
        try:
            option = int(line)
            if 0 <= option < len(self.options):
                self.response = self.options[option]
                return True
        except ValueError:
            pass

        # If not, see if the line matches an existing session.
        session = find_session_to_load(self.sessions, line)
        if session:
            self.response = session
            return True

        # No unique match, try again.
        pre_prompt, self.options = self.generate_next_prompt(line)
        self.stdout.write(pre_prompt + '\n')
        return False

    def completenames(self, text, *ignored):
        sessions = filter_sessions(self.sessions, text)
        return get_session_completions(sessions, text)

    def do_help(self, *ignored):
        self.stdout.write(self.get_intro())
        self.stdout.write('\n')
        self.stdout.write('The session is chosen in the following order:\n')
        self.stdout.write('- Blank lines match the first preset (0).\n')
        self.stdout.write('- Valid numbers match presets.\n')
        self.stdout.write('- Unique exact name or pid matches.\n')
        self.stdout.write('- Unique prefix matches.\n')
        self.stdout.write('Otherwise the a new interactive prompt is shown.\n')
        self.stdout.write('\n')
        self.stdout.write('A "*" prefix in the list means the session is already attached.\n')
        self.stdout.write('Append "!" to force creation of a new session.\n')
        self.stdout.write('CTRL-C or CTRL-D will exit.\n')
        self.stdout.write('"?" will display this help.\n')
        self.stdout.write('\n')

    def get_intro(self):
        """ Get help text (list of all the sessions) """
        if self.sessions:
            return ('All current sessions: \n' +
                    get_session_list_string(self.sessions) +
                    '\n')
        else:
            return 'No current sessions\n\n'

    def generate_next_prompt(self, session_name):
        """ Returns the next prompt text as well as the list of options it offered """
        sessions = filter_sessions(self.sessions, session_name)
        if not session_name and not self.has_default:
            # add the default if there is no default session open, make it the first option.
            sessions.insert(0, Session(DEFAULT_SESSION_NAME))
        elif not sessions:
            # if there are no options at all then creating is the default.
            sessions.append(Session(session_name))
        lines = ['Preset options (leave empty for default): ']
        for i, session in enumerate(sessions):
            text = '%s %s: %s' %('*' if session.attached else ' ', i, session.pretty())
            if not session.exists:
                text += ' (create)'
            if i == 0:
                text += ' [default]'
            lines.append(text)
        lines.append('Type ? for help')
        return '\n'.join(lines), sessions

    def get_user_response(self):
        """ Ask the user which session they want to open and return the result """
        try:
            self.cmdloop()
        except KeyboardInterrupt:
            return None
        return self.response

def run_prog(
        prog,
        session,
        reattach = False,
        child = False,
        window = None,
        current_prog = None,
        command = None):
    args, do_exec = prog.launch_command(
            session,
            reattach = reattach,
            window = window,
            child = child,
            current_prog = current_prog,
            command = command)

    if do_exec:
        os.execvp(args[0], args)
    else:
        subprocess.call(args)

def find_session_to_load(all_sessions, session_name, default = None):
    # exclamation mark forces a new session to open
    if session_name.endswith('!') and session_name != '!':
        return Session(session_name[:-1])

    # find all matching sessions
    sessions = filter_sessions(all_sessions, session_name)

    # if there are no matching session, suggest making a new one
    if not sessions:
        return Session(session_name or default)

    # if there is one matching session then that's what we want!
    if len(sessions) == 1:
        return sessions[0]

    # Exact name or exact pid matches
    exact_name = []
    exact_pid = []
    for session in sessions:
        if session.name == session_name:
            exact_name.append(session)
        elif session.pid == session_name:
            exact_pid.append(session)

    if len(exact_name) == 1:
        return exact_name[0]
    elif len(exact_pid) == 1:
        return exact_pid[0]

    return None

def filter_sessions(sessions, prefix):
    if not prefix:
        return sessions
    return [s for s in sessions if
            s.name.startswith(prefix) or
            s.pid and (s.pid  + '.' + s.name).startswith(prefix) or
            s.pid and (s.name  + '.' + s.pid).startswith(prefix)]

def get_session_list(prog):
    result = subprocess.run(
            prog.list_command(),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)

    sessions = []
    for line in result.stdout.decode('utf-8').split('\n'):
        result = prog.list_line_to_session(line)
        if result:
            sessions.append(result)
    return sessions

def has_default(all_sessions):
    """ Return true if there are any sessions with the default name """
    return any(s.name == DEFAULT_SESSION_NAME for s in all_sessions)

def get_session_list_string(sessions, file = sys.stdout):
    lines = []
    for session in sessions:
        lines.append(('* ' if session.attached else '  ') + session.pretty())
    return '\n'.join(lines)

def get_session_completions(sessions, prefix):
    by_name = {}
    for session in sessions:
        by_name[session.name] = []
        if session.pid:
            by_name[session.name].append(session.pid)

    completions = []
    for name, pids in by_name.items():
        if len(pids) <= 1 and session.name.startswith(prefix):
            completions.append(name)
        else:
            for pid in pids:
                completions.append('%s.%s' %(name, pid))
    return completions

def get_current_prog():
    if os.environ.get('STY', ''):
        return 'screen'
    if os.environ.get('TMUX', ''):
        return 'tmux'
    return None

def main():
    parser = optparse.OptionParser(description = 'A wrapper for screen and tmux')
    parser.add_option(
        '--reattach', '-r',
        action = 'store_true',
        help = "Reattach session (don't close existing sessions)")
    parser.add_option(
        '--child', '-c',
        action = 'store_true',
        help = "Create as child process, don't exec")
    parser.add_option(
        '--window', '-p',
        help = 'Open to given window')
    parser.add_option(
        '--ask', '-a',
        action = 'store_true',
        help = 'Ask which session to open even there is only one match')
    parser.add_option(
        '--list', '-l',
        action = 'store_true',
        help = 'List current sessions')
    parser.add_option(
        '--complete',
        action = 'store_true',
        help = 'List completions for current screens')
    parser.add_option(
        '--binary',
        help = "The binary for the session program")
    parser.add_option(
        '--command',
        help = "The command to run in the intial window if this is a new session")

    options, args = parser.parse_args()
    prog_name = args[0] if args else ''
    session_name = args[1] if len(args) == 2 else ''

    current_prog = get_current_prog()
    if current_prog == 'screen':
        print("Can't start a new session from within screen", file=sys.stderr)
        sys.exit(1)
    if current_prog == 'tmux' and prog_name != 'tmux':
        print("Can only start tmux sessions from within tmux", file=sys.stderr)
        sys.exit(1)

    prog = None
    if prog_name == "screen":
        prog = ScreenSettings(options.binary)
    elif prog_name == "tmux":
        prog = TmuxSettings(options.binary)
    else:
        print("Unknown program: " + prog_name, file=sys.stderr)
        sys.exit(1)

    # get all the screens
    all_sessions = get_session_list(prog)

    # if we just wanted a list of sessions (or completions) do that first
    if (options.complete):
        screens = filter_sessions(all_sessions, session_name)
        print(' '.join(get_session_completions(screens, session_name)))
        return
    if (options.list):
        sessions = filter_sessions(all_sessions, session_name)
        print(get_session_list_string(sessions))
        return

    # Try to find which session is being asked for
    session = None
    if not options.ask and session_name:
        session = find_session_to_load(all_sessions, session_name, DEFAULT_SESSION_NAME)
    if not session:
        # Multiple possible sessions, ask the user!
        session = SessionPrompt(all_sessions, session_name).get_user_response()
        if not session:
            print()
            sys.exit(2)

    run_prog(
        prog,
        session,
        child = options.child,
        reattach = options.reattach,
        window = options.window,
        current_prog = current_prog,
        command = options.command)

if __name__ == '__main__':
    main()
