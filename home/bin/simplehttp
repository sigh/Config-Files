#!/usr/bin/python3
#
# Usage: simplehttp [PORT] [CONTENT_TYPE] COMMAND
#   If COMMAND is a directory all its children are served.
#   If COMMAND is a regular file then it is served.
#   If COMMAND is an executable or a shell command, then it is run for every
#     request and the output served.
#
#   Executed commands can take advantage of CGI variables in the environment.
#   NOTE: There is no support for real CGI scripts yet - the request body and
#   the response header are handled by the server code.
#
#   For regular files (served directly or from inside a directory) the program
#     attempts to guess the content type unless overridden by CONTENT_TYPE.
#   For executed commands, the content type is text/plain by default.
#
#   PORT is 8000 by default.

import os
import subprocess
import sys
import urllib.parse

import http.server


# FakeHandler exists purely so we can use its methods
# Could use inheritance, but I don't know what other junk I'll pick up.
class FakeHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self):
        pass


fake_handler = FakeHandler()


class SimpleRequestHandler(http.server.BaseHTTPRequestHandler):
    def translate_path(self, path):
        return fake_handler.translate_path(path)

    def guess_type(self, path):
        return fake_handler.guess_type(path)

    def create_env(self):
        env = {}
        rest, ignore, query = self.path.partition("?")

        # Mostly copied from
        # http://code.google.com/p/unladen-swallow/source/browse/trunk/Lib/CGIHTTPServer.py

        env["SERVER_SOFTWARE"] = self.version_string()
        env["SERVER_NAME"] = self.server.server_name
        # env['GATEWAY_INTERFACE'] = 'CGI/1.1'
        env["SERVER_PROTOCOL"] = self.protocol_version
        env["SERVER_PORT"] = str(self.server.server_port)
        env["REQUEST_METHOD"] = self.command
        uqrest = urllib.parse.unquote(rest)
        env["PATH_INFO"] = uqrest
        env["PATH_TRANSLATED"] = self.translate_path(uqrest)
        if self.SCRIPT_NAME:
            env["SCRIPT_NAME"] = self.SCRIPT_NAME
        if query:
            env["QUERY_STRING"] = query
        host = self.address_string()
        if host != self.client_address[0]:
            env["REMOTE_HOST"] = host
        env["REMOTE_ADDR"] = self.client_address[0]
        authorization = self.headers.get("authorization")
        if authorization:
            authorization = authorization.split()
            if len(authorization) == 2:
                import base64
                import binascii

                env["AUTH_TYPE"] = authorization[0]
                if authorization[0].lower() == "basic":
                    try:
                        authorization = base64.decodebytes(authorization[1].encode())
                    except binascii.Error:
                        pass
                    else:
                        authorization = authorization.decode().split(":")
                        if len(authorization) == 2:
                            env["REMOTE_USER"] = authorization[0]
        if hasattr(self.headers, "get_content_type"):
            env["CONTENT_TYPE"] = self.headers.get_content_type()
        else:
            env["CONTENT_TYPE"] = self.headers.get("content-type", "")
        length = self.headers.get("content-length")
        if length:
            env["CONTENT_LENGTH"] = length
        referer = self.headers.get("referer")
        if referer:
            env["HTTP_REFERER"] = referer
        accept = []
        accept_headers = self.headers.get_all("accept") or []
        for line in accept_headers:
            if line[:1] in "\t\n\r ":
                accept.append(line.strip())
            else:
                accept = accept + line.split(",")
        env["HTTP_ACCEPT"] = ",".join(accept)
        ua = self.headers.get("user-agent")
        if ua:
            env["HTTP_USER_AGENT"] = ua
        co = list(filter(None, self.headers.get_all("cookie") or []))
        if co:
            env["HTTP_COOKIE"] = ", ".join(co)
        for k in (
            "QUERY_STRING",
            "REMOTE_HOST",
            "CONTENT_LENGTH",
            "HTTP_USER_AGENT",
            "HTTP_COOKIE",
            "HTTP_REFERER",
            "SCRIPT_NAME",
        ):
            env.setdefault(k, "")

        return env

    def get_content_length(self, env):
        try:
            return int(env["CONTENT_LENGTH"])
        except (ValueError, KeyError):
            return 0

    def do_GET(self):
        self.do_POST()

    def do_POST(self):
        if not self.ALLOW_PATH and self.path != "/":
            self.error_message_format = "Not found"
            self.send_error(404)
            return

        env = self.create_env()
        os.environ.update(env)
        length = self.get_content_length(env)
        content = b""
        if length:
            content = self.rfile.read(length)

        p = subprocess.Popen(
            self.COMMAND,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=sys.stderr,
        )
        out, err = p.communicate(content)

        if not p.returncode:
            self.send_response(200, "OK")
            content_type = self.guess_type("")
            self.send_header("content-type", content_type)
            self.end_headers()
            self.wfile.write(out)
        else:
            self.error_message_format = "Server Error"
            self.send_error(500)

    error_content_type = "text/plain"


TYPE_MAP = {
    "text": "text/plain",
    "plain": "text/plain",
    "html": "text/html",
}


def set_content_type_method(cls, content_type):
    if content_type:
        print("Content type:", content_type, file=sys.stderr)
        cls.guess_type = lambda s, p: content_type


def get_handler(args):
    # By default serve the current directory
    serve_what = "."
    if len(args):
        serve_what = args.pop()

    content_type = None
    if len(args):
        arg = args.pop()
        content_type = TYPE_MAP.get(arg, arg)

    if os.path.isdir(serve_what):
        # If serving a directory then use http.server to serve the entire
        # tree recursively
        os.chdir(serve_what)
        print("Serving directory:", serve_what, file=sys.stderr)
        handler = http.server.SimpleHTTPRequestHandler
        set_content_type_method(handler, content_type)
        return handler

    handler = SimpleRequestHandler
    handler.ALLOW_PATH = True
    handler.SCRIPT_NAME = None

    if serve_what == "-":
        handler.COMMAND = ["echo", sys.stdin.read()]
        handler.ALLOW_PATH = False
        print("Serving stdin", file=sys.stderr)
    elif os.access(serve_what, os.X_OK):
        print("Executing file:", serve_what, file=sys.stderr)
        handler.COMMAND = ["sh", "-c", os.path.abspath(serve_what)]
        handler.SCRIPT_NAME = serve_what
    elif os.path.isfile(serve_what):
        print("Serving file:", serve_what, file=sys.stderr)
        handler.COMMAND = ["cat", serve_what]
        handler.ALLOW_PATH = False
        if not content_type:
            content_type = fake_handler.guess_type(serve_what)
    else:
        print("Running shell command:", serve_what, file=sys.stderr)
        handler.COMMAND = ["sh", "-c", serve_what]

    set_content_type_method(handler, content_type or "text/plain")

    return handler


def main(args):
    # If the first argument is a number treat it as a port
    port = 8000
    try:
        port = int(args[0])
        del args[0]
    except (ValueError, IndexError):
        pass

    # Setup the server
    handler = get_handler(args)
    httpd = http.server.HTTPServer(("", port), handler)

    # Don't show the traceback when a caller kills this process
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main(sys.argv[1:])
