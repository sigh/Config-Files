#!/usr/bin/python

import os
import subprocess
import sys

import BaseHTTPServer
import SimpleHTTPServer

class SimpleRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path != '/':
            self.error_message_format = 'Not found'
            self.send_error(404)
            return
        p = subprocess.Popen(
            self.COMMAND,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
        out, err = p.communicate()
        if not p.returncode:
            self.send_response(200, 'OK')
            if self.CONTENT_TYPE:
                self.send_header('content-type', self.CONTENT_TYPE)
            self.end_headers()
            self.wfile.write(out)
        else:
            self.error_message_format = err
            self.send_error(500)

    error_content_type = 'text/plain'

PORT = 8000
TYPE_MAP = {
    'text': 'text/plain',
    'plain': 'text/plain',
    'html': 'text/html',
}

def get_handler(args):
    global PORT

    # By default serve the current directory
    server_what = '.'
    if len(args) > 1:
        serve_what = args.pop()

    if os.path.isdir(serve_what):
        # If serving a directory then use SimpleHTTPServer to serve the entire
        # tree recursively
        os.chdir(serve_what)
        print >>sys.stderr, "Serving directory:", serve_what
        return SimpleHTTPServer.SimpleHTTPRequestHandler

    handler = SimpleRequestHandler

    if os.access(serve_what, os.X_OK):
        print >>sys.stderr, "Executing file:", serve_what
        handler.COMMAND = ['sh', serve_what]
    elif os.path.isfile(serve_what):
        print >>sys.stderr, "Serving file:", serve_what
        handler.COMMAND = ['cat', serve_what]
    else:
        print >>sys.stderr, "Running shell command:", serve_what
        handler.COMMAND = ['sh', '-c', serve_what]

    content_type = 'text/plain'
    if len(args) > 1:
        args = args.pop()
        content_type = TYPE_MAP.get(arg, arg)
    handler.CONTENT_TYPE = content_type
    print >>sys.stderr, "Content type:", content_type

    if len(args) > 1:
        PORT = int(args.pop())

    return handler

def main(args):
    handler = get_handler(args)
    httpd = BaseHTTPServer.HTTPServer(("", PORT), handler)
    # Don't show the traceback when a caller kills this process
    try:
        httpd.serve_forever()
    except:
        pass

if __name__ == '__main__':
    main(sys.argv)
